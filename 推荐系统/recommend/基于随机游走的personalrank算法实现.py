#!usr/bin/env python
#_*_ coding:utf-8 _*_

#-*-coding:utf-8-*-
'''''
Created on 2018-4

'''

'''''
G：二分图   alpha:随机游走的概率   root：游走的初始节点     max_step；最大走动步数
'''
import time
def PersonalRank(G, alpha, root, max_step):
    rank = dict()
    print( G.keys())
    rank = {x:0 for x in G.keys()}
    rank[root] = 1
    #开始迭代
    begin=time.time()
    for k in range(max_step):
        tmp = {x:0 for x in G.keys()}
        #取节点i和它的出边尾节点集合ri
        for i, ri in G.items():  #i是顶点。ri是与其相连的顶点极其边的权重
            #取节点i的出边的尾节点j以及边E(i,j)的权重wij, 边的权重都为1，在这不起实际作用
            for j, wij in ri.items():   #j是i的连接顶点，wij是权重
                #i是j的其中一条入边的首节点，因此需要遍历图找到j的入边的首节点，
                #这个遍历过程就是此处的2层for循环，一次遍历就是一次游走
                tmp[j] += alpha * rank[i] / (1.0 * len(ri))
        #我们每次游走都是从root节点出发，因此root节点的权重需要加上(1 - alpha)
        #在《推荐系统实践》上，作者把这一句放在for j, wij in ri.items()这个循环下，我认为是有问题。
            tmp[root] += (1 - alpha)
            rank = tmp
            end=time.time()
            print ('use_time',end-begin)
            # 输出方法一
            lst=sorted(rank.items(),key=lambda x:x[1],reverse=True)
            for ele in lst:
                 print ("%s:%.3f, \t" %(ele[0],ele[1]))
            # 输出方法二
            #输出每次迭代后各个节点的权重
            # print ('iter:  ' + str(k) + "\t",)
            # for key, value in rank.items():
            #     print ("%s:%.3f, \t"%(key, value),)


    return rank


'''''
主函数，G表示二分图，‘A’表示节点，后边对应的字典的key是连接的顶点，value表示边的权重
'''
if __name__ == '__main__':
    G = {'A' : {'a' : 1, 'c' : 1},
         'B' : {'a' : 1, 'b' : 1, 'c':1, 'd':1},
         'C' : {'c' : 1, 'd' : 1},
         'a' : {'A' : 1, 'B' : 1},
         'b' : {'B' : 1},
         'c' : {'A' : 1, 'B' : 1, 'C':1},
         'd' : {'B' : 1, 'C' : 1}}
    # print(type(G))
    # #构建次函数为见0502
    # G={'港湾': {'290243': 1, '264374': 1, '247285': 1, '14191': 1, '215831': 1}, '131718': {'相亲相爱': 1}, '131829': {'相亲相爱': 1}, '蓝天白云': {'30382_30465': 1, '276898': 1, '162032': 1, '45682_45693_45713': 1, '287878_288403': 1, '290932': 1, '289452_288634_288678': 1}, '勇者无畏': {'155871': 1, '247111': 1, '46559_46588_46664': 1, '233737': 1, '37440': 1, '65246': 1, '132304': 1, '288663': 1}, '45682_45693_45713': {'蓝天白云': 1}, '247285': {'港湾': 1}, '310124': {'相亲相爱': 1}, '264374': {'港湾': 1}, '247111': {'勇者无畏': 1}, '233737': {'勇者无畏': 1}, '276898': {'蓝天白云': 1}, '65246': {'勇者无畏': 1, '相亲相爱': 1}, '132304': {'勇者无畏': 1}, '289452_288634_288678': {'蓝天白云': 1}, '288663': {'勇者无畏': 1}, '162032': {'蓝天白云': 1}, '30382_30465': {'蓝天白云': 1}, '相亲相爱': {'88743': 1, '310124': 1, '25266': 1, '131718': 1, '65246': 1, '131829': 1}, '46559_46588_46664': {'勇者无畏': 1}, '25266': {'相亲相爱': 1}, '37440': {'勇者无畏': 1}, '215831': {'港湾': 1}, '290932': {'蓝天白云': 1}, '155871': {'勇者无畏': 1}, '88743': {'相亲相爱': 1}, '290243': {'港湾': 1}, '287878_288403': {'蓝天白云': 1}, '14191': {'港湾': 1}}
    PersonalRank(G, 0.85, '131829', 100)